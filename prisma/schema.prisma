generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId

  accounts         Account[]
  listings         Listing[]
  reservations     Reservation[]
  exchanges        Exchange[]
  searches         Search[]
  findings         Finding[]
  partnerRequests  PartnerRequest[]
  partnerResponses PartnerResponse[]
  reviews          Review[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  imageSrc    String
  createdAt   DateTime @default(now())
  category    String
  address     String
  lat         Float
  lng         Float
  userId      String   @db.ObjectId
  price       Float

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
  reviews      Review[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Float
  approved   Boolean  @default(false)
  createdAt  DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  reviews Review[]
}

model Review {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  listingId          String   @db.ObjectId
  reservationId      String   @db.ObjectId
  createdAt          DateTime @default(now())
  communicationScore Int
  accuracyScore      Int
  publicMessage      String
  privateMessage     String

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing     Listing     @relation(fields: [listingId], references: [id], onDelete: Cascade)
  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

model Exchange {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  description    String
  imageSrc       String
  createdAt      DateTime @default(now())
  category       String
  address        String
  lat            Float
  lng            Float
  userId         String   @db.ObjectId
  customerUserId String   @db.ObjectId
  price          Float

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Search {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  imageSrc    String
  createdAt   DateTime @default(now())
  category    String
  address     String
  lat         Float
  lng         Float
  userId      String   @db.ObjectId
  found       Boolean
  foundAt     DateTime

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  findings Finding[]
}

model Finding {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  searchId  String   @db.ObjectId
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  search Search @relation(fields: [searchId], references: [id], onDelete: Cascade)
}

model PartnerRequest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  imageSrc    String
  createdAt   DateTime @default(now())
  category    String
  address     String
  lat         Float
  lng         Float
  userId      String   @db.ObjectId
  match       Boolean

  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses PartnerResponse[]
}

model PartnerResponse {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  requestId String   @db.ObjectId
  createdAt DateTime @default(now())

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  request PartnerRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
}
